/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.aquapackrobotics.sw8s;
import javax.swing.*;
import java.awt.*;
import java.util.concurrent.ScheduledThreadPoolExecutor;

import org.aquapackrobotics.sw8s.missions.Mission;
import org.aquapackrobotics.sw8s.missions.AutoMission;
import org.aquapackrobotics.sw8s.missions.ManualMission;
public class App {

    static final int POOLSIZE = 1;
    
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        ScheduledThreadPoolExecutor pool = new ScheduledThreadPoolExecutor(POOLSIZE);
        String currentMission = "N/A";
        String helpFlag[] = {
            "\nBasic Utility:", 
            "\n'--help' or '-h' -- displays list of command flags",
            "\n'--currentMission' -- prints the current mission",
            "\nTesting:",
            "\n'--test' -- The Command Flag used in Testing", 
            "\n'--testmission' -- sets mission to be the string 'test' for testing purposes",
            "\nMissions:", 
            "\n'--raw_test' runs the Raw Test mission",
            "\n '--local_test' runs the Local Test mission"};
        System.out.println("Basic Format: gradle run --args='_'");
        for (String str: args) {
            switch (str) {
                case "--test":
                    System.out.println("Yay! it worked!");
                    break;
                case "--testmission":
                    currentMission = "test";
                    break;
                case "--currentMission":
                    System.out.println(currentMission);
                    break;
                case "-h":
                case "--help":
                    for(int i = 0; i < helpFlag.length; i++){
                        System.out.println(helpFlag[i]);
                    }
                    break;
                // case "--raw_test":
                //     Mission missionRaw_Test = (Mission) new Raw_TestMission(pool);
                //     missionRaw_Test.run();
                //     break;
                // case "--local_test":
                //     Mission missionLocal_Test = (Mission) new Local_TestMission(pool);
                //     missionLocal_Test.run();
                //     break;
                // case "-s1":
                //     executeState(State1);
                //     break;
                // case "-s2":
                //     executeState(State2);
                //     break;
                // case "-s3":
                //     executeState(State3);
                //     break;
                case "manual":
                    Mission missionManual = (Mission) new ManualMission(pool);
                    missionManual.run();
                    break;
                default:
                    Mission missionAuto = (Mission) new AutoMission(pool);
                    missionAuto.run();
                    break;

            }
        }
        //Creating the Frame
        JFrame frame = new JFrame("Chat Frame");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 400);
         //Creating the panel at bottom and adding components
         JPanel panel = new JPanel(); // the panel is not visible in output
         JLabel label = new JLabel("Enter Text");
         JTextField tf = new JTextField(10); // accepts upto 10 characters
         JButton send = new JButton("Send");
         panel.add(label); // Components Added using Flow Layout
         panel.add(tf);
         panel.add(send);
 
         // Text Area at the Center
         JTextArea ta = new JTextArea();
         ta.setText("Mission: " + "N/A" + 
                    "\nState: " + "N/A" +
                    "");
 
         //Adding Components to the frame.
         frame.getContentPane().add(BorderLayout.SOUTH, panel);
         frame.getContentPane().add(BorderLayout.CENTER, ta);
         frame.setVisible(true);
        
    }
}
